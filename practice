
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define MAXWORDS 10
#define MAXLENGTH 30

int nrWords(char *dict[]){
    int nrWords = 0;
    for(int i = 0; i < MAXWORDS; i++){
        if(dict[i] != NULL){
            nrWords++;
        }
    }
    return nrWords;
}

void addWord(char *dict[], char word[]){
    int index = nrWords(dict);
    if(index == 10){
        printf("The dictionary is full.\n");
        return;
    }else{
        dict[index] = (char*) malloc((strlen(word) + 1) * sizeof(char));
        strcpy(dict[index], word);
    }
}

void freeAll(char *dict[]){
    for(int i = 0; i < MAXWORDS; i++){
        if(dict[i] != NULL){
            free(dict[i]);
            dict[i] = NULL;
        }
    }
}

void printDict(char *dict[]){
    if(nrWords(dict) == 0){
        printf("The dictionary is empty.\n");
        return;
    }else{
        printf("Dictionary:\n");
        for(int i = 0; i < nrWords(dict); i++){
            if(dict[i] != NULL){
                printf("- %s\n", dict[i]);
            }
        }
    }
}

int findWord(char *dict[], char word[]){
    for(int i = 0; i < nrWords(dict); i++){
        if(strcmp(dict[i], word) == 0){
            return i;
        }
    }
    return -1;
}

void removeWord(char *dict[], char word[]){
    int index = findWord(dict, word);
    if(index == -1){
        printf("The word \"%s\" is not in the dictionary.\n", word);
        return;
    }else{
        free(dict[index]);
        dict[index] = NULL;
        for(int i = index; i < nrWords(dict); i++){
            dict[i] = (char*) malloc((strlen(dict[i + 1]) + 1) * sizeof(char));
            strcpy(dict[i], dict[i + 1]);
            free(dict[i + 1]);
            dict[i + 1] = NULL;
        }
    }
}

void swapWords(char *dict[], char word1[], char word2[]){
    int index1 = findWord(dict, word1);
    int index2 = findWord(dict, word2);
    if(index1 == -1 || index2 == -1){
        printf("Cannot swap words. At least one word is missing in the dictionary.\n");
        return;
    }else if(index1 == index2){
        return;
    }else{
        free(dict[index1]);
        dict[index1] = NULL;
        free(dict[index2]);
        dict[index2] = NULL;
        dict[index1] = (char*) malloc((strlen(word2) + 1) * sizeof(char));
        strcpy(dict[index1], word2);
        dict[index2] = (char*) malloc((strlen(word1) + 1) * sizeof(char));
        strcpy(dict[index2], word1);
    }
}

int longestWord(char *dict[], int from){
    if(nrWords(dict) == 0 || from >= nrWords(dict)){
        return -1;
    }
    int index = from;
    for(int i = from + 1; i < nrWords(dict); i++){
        if(strlen(dict[i]) > strlen(dict[index])){
            index = i;
        }
    }
    return index;
}

// void sortDict(char *dict[], int sortedUntil){
//     if(sortedUntil == nrWords(dict)){
//         return;
//     }
//     int index2 = sortedUntil;
//     index2 = longestWord(dict, sortedUntil);
//     if(sortedUntil != index2){
//         printf("Swapped %d and %d\n", index2, sortedUntil);
//         swapWords(dict, dict[sortedUntil], dict[index2]);
//     }
//     sortedUntil++;
//     sortDict(dict, sortedUntil);
    
// }

int main (void)
{
    char cmd = 'z';
    char* dict[MAXWORDS] = {NULL};
    char word[MAXLENGTH] = {'\0'};
    char word1[MAXLENGTH] = {'\0'};
    int sortedUntil = 0;
    
    do{
        printf("Command [qnapfrslo]? ");
        scanf(" %c", &cmd);
        switch(cmd){
            case 'q':
                freeAll(dict);
                printf("Bye!\n");
                break;
            case 'n':
                printf("THe dictionary contains %d words.\n", nrWords(dict));
                break;
            case 'a':
                printf("Word? ");
                scanf("%s", word);
                addWord(dict, word);
                break;
            case 'p':
                printDict(dict);
                break;
            case 'f':
                printf("Word? ");
                scanf("%s", word);
                printf("The index of \"%s\" is %d.\n", word, findWord(dict, word));
                break;
            case 'r':
                printf("Word? ");
                scanf("%s", word);
                removeWord(dict, word);
                break;
            case 's':
                printf("First word? ");
                scanf("%s", word);
                printf("Second word? ");
                scanf("%s", word1);
                swapWords(dict, word, word1);
                break;
            case 'l':
                if(longestWord(dict, 0) != -1){
                    printf("The longest word in the dictionary is \"%s\".\n", dict[longestWord(dict, 0)]);
                }
                break;
            case 'o':
                // sortDict(dict, sortedUntil);
                break;
                
            default:
                printf("Unknown command \'%c\'\n", cmd);
                break;
        }
    }while(cmd != 'q');
    return 0;
}